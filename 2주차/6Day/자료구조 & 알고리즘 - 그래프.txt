자료구조 & 알고리즘 - 그래프
그래프
- 정점과 정점 사이를 연결하는 간선으로 이루어진 비선형 자료구조
정점 집합과 간선 집합으로 표현할 수 있다.
ex) 사람 관계 중 사람이 정점, 사람과 사람사이의 관계를 간선이라 한다.

그래프의 특징
- 정점은 여러 개의 간선을 가질 수 있다.
- 크게 방향 그래프와 무방향 그래프로 나눌 수 있다.
- 간선은 가중치를 가질 수 있다.
- 사이클이 발생할 수 있다.

1. 무방향 그래프
- 간선으로 이어진 정점끼리는 양방향으로 이동이 가능하다.
- 표현하기에 (A,B)와 (B,A)는 같은 간선으로 취급된다.
- ex) 양방향 통행 도로

2. 방향 그래프
- 간선에 방향성이 존재하는 그래프
- 양방향으로 갈 수 있더라도 <A,B>와 <B,A>는 다른 간선으로 취급된다.
- ex) 일방 통행

3. 연결 그래프
- 모든 정점이 서로 이동 가능한 상태인 그래프

4. 비연결 그래프
- 특정 정점쌍 사이에 간선이 존재하지 않는 그래프

5. 완전 그래프
- 모든 정점끼리 연결된 상태인 그래프
- 한 정점의 간선 수: 모든 정점 수 - 1
- (모든 정점 수 - 1) * 정점 수 = 모든 간선 수

6. 사이클
- 그래프의 정점과 간선의 부분 집합에서 순환이 되는 부분

그래프의 구현 방법
- 인접 행렬, 인접 리스트 두 가지 방식으로 그래프를 표현할 수 있다.
- 인접 행렬 = 2차원 배열, 인접 리스트 = 연결 리스트로 표현 가능하다.

JavaScript에서 사용법
1. 인접 행렬
- 정점의 크기 만큼 2차원 배열을 만들고 연결이 안된 상태로 초기화한다.
- 행렬의 열 부분을 시작 정점, 행렬의 행 부분을 도착 정점으로 두고 true 값을 넣어주면 간선이 연결된 것으로 된다.
- 간선에 가중치를 넣으려면 false,true가 아닌, null이나 임의의 가중치 값을 넣으면 된다.
- 무방향 그래프를 구현한다면 모든 값을 대칭으로 넣어주면 된다.

Array(5).fill(false) 
-> 배열 5개를 모두 false 값 넣어주기

Array.from('Tei');
// ["T", "e", "i"]

Array.from([1, 2, 3], x => x + x);
// [2, 4, 6]

Array.from(Array(5), ( ) => Array(5).fill(false));
// Array(5) 배열의 값에 false로 초기화 해준다.


2. 인접 리스트
- 정점의 수 만큼 배열을 만든 후 연결할 정점을 배열에 추가하면 된다.




