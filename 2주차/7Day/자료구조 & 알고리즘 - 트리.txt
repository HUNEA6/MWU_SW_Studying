자료구조 & 알고리즘 - 트리
트리
- 방향 그래프의 일종으로 정점을 가리키는 간선이 하나 밖에 없는 구조를 가지고 있다.

Root: 가장 상위에 있는 정점
Node: 각 정점
Leaf Node: 더 이상 자식이 없는 정점
Level: Root로 부터 몇 번째 깊이인지 표현할 때 사용
Degree(차수): 한 정점에서 뻗어 나가는 간선의 수 

특징
- 루트 정점을 제외한 모든 정점은 반드시 하나의 부모 정점을 가진다.
- 정점이 N개인 트리는 반드시 N-1개의 간선을 가진다.
- 루트에서 특정 정점으로 가는 경로는 유일하다.

이진트리
- 이진 트리는 각 정점이 최대 2개의 자식을 가지는 트리를 의미한다.

특징
- 정점이 N개인 이진 트리는 최악의 경우 높이가 N이 될 수 있다.
- 정점이 N개인 포화 또는 완전 이진 트리의 높이는 log N이다.
- 높이가 h인 포화 이진 트리는 2^h-1개의 정점을 가진다.
- 일반적인 이진 트리를 사용하는 경우는 많지 않다. 다음 자료구조에 응용된다.
* 이진 탐색 트리, 힙, AVL 트리, 레드 블랙 트리


트리의 구현 방법
- 그래프와 마찬가지로 인접 행렬, 인접 리스트 두 가지 방식으로 트리를 표현할 수 있다.

이진 트리의 구현 방법
- 배열 혹은 요소에 링크가 2개 존재하는 연결 리스트로 구현할 수 있다.

JavaScript에서 사용법
이진 트리(Array)
- 왼쪽 정점 = Index * 2
- 오른쪽 정점 = Index * 2 + 1
- 부모 정점 = floor(Index / 2)

이진 트리(Linked List)
- 기존 연결 리스트의 노드에 Next 대신 Left와 Right 넣기
- 그리고 계속 Left, Right에 값을 연결시켜 주면 이진트리 완성

과제
- 전위 순회, 중위 순회, 후위 순회를 검색하여 직접 구현해보기. (힌트: 스택, 재귀 호출)


