메모리 심화
let variable = 126
(키워드) (변수명) (값)

* 변수 선언 시 자바스크립트 내부에서 일어나는 일!
변수의 고유 식별자를 생성하고 메모리의 주소를 할당한다.
최종적으로는 생성된 주소에 값을 넣어준다.

 
우리가 선언한 변수나 상수는 값이 아닌 메모리 주소를 바라본다.
새로운 변수에 기존 변수를 대입하면 기존 변수의 메모리 주소를 참조하게 된다.

 
 
만약, 기존 변수를 조작하였을 때는 두번 째 생성한 변수 값은 변하지 않고
새로 메모리 주소를 할당받고 그곳에 값을 넣게된다.
이유? - 자바스크립트에서 원시타입은 변경이 불가능하기 때문 (원시타입의 값이 변경될 때는 항상 메모리가 새로 할당된다.)

 
자바스크립트 엔진은 가상머신으로 구성되어 있다.
이 가상머신에는 메모리 모델을 구현해 놓았는데 각각 Heap 영역과 Call Stack 영역이 있다.
Heap은 참조 타입이 들어가고 Call Stack은 원시 타입이 들어가게 된다.


*배열은 Object 타입이기 때문에 참조 타입으로 구분된다.
배열 선언 시 Heap에 배열 영역이 생성되는데 Call Stack에 생성된 배열변수는 Heap에서 생성된 배열에 메모리 주소를 참조한다.
Heap 영역의 메모리는 동적으로 크기가 변할 수 있다.
배열에 값을 추가하면 Heap 메모리 영역에 그대로 할당된다.
배열을 상수로 선언했는데 동작하는 이유이기도 하다.
상수여도 push가 동작하는 이유는 Call Stack 에 할당된 메모리를 변경하는 것이 아닌 Heap 메모리를 변경하는 것이기 때문이다.


사용을 마친 메모리는 
Garbage Collector를 통해 정리될 수 있다.