자료구조 & 알고리즘 - 연결 리스트

추가와 삭제가 반복되는 로직이라면 어떻게 해야할까?

연결 리스트
- 연결 리스트는 각 요소를 포인터로 연결하여 관리하는 선형 자료구조다.
- 각 요소는 노드라고 부르며 데이터 영역과 포인터 영역으로 구성된다.

연결 리스트 특징 (배열과 정 반대)
- 메모리가 허용하는한 요소를 제한없이 추가할 수 있다.
- 탐색은 O(n)이 소요된다.
- 요소를 추가하거나 제거할 때는 O(1)이 소요된다.
- Singly Linked List, Doubly Linked List, Circular Linked List가 존재한다.

배열과 차이점
1. 메모리 차이
- 배열은 순차적인 데이터가 들어가기 때문에 메모리 영역을 연속적으로 사용하지만, 연결 리스트는 순차적이지 않아서 데이터가 퍼져있다.
- 그렇기에 연결 리스트는 포인터를 사용하여 각 영역을 참조하게 된다.

2. 요소 삭제 및 추가
- 배열은 요소를 삭제 및 추가할 때 선형 시간O(n)이 소요된다. 
- 연결 리스트는 요소를 삭제 및 추가할 때 상수 시간O(1)이 소요된다.

Singly Linked List(단일 연결 리스트)
- Head에서 Tail 까지 단 방향으로 이어지는 연결 리스트
- 가장 단순한 형태인 연결 리스트다.

핵심 로직
- 요소 찾기, 추가, 삭제

1. 요소 찾기
- 헤드 포인터에서 시작하여 다음 요소인 헤드를 찾는다. 
- 그리고 찾는 값이 아니면 다음 요소인 헤드를 찾는다.
- 값을 찾았다면 우리가 원하는 로직에 따라 결과값을 반환하면 종료한다.

2. 요소 추가
- 추가할 요소의 포인터 영역을 다음 요소의 데이터 영역을 가리키도록 한다.
- 이어서 이전 요소의 포인터 영역이 추가할 요소의 데이터 영역을 가리키도록 한다.
- 추가를 위한 탐색을 하지 않도록 주의해야 한다.

3. 요소 삭제
- 삭제할 요소의 이전 요소가 삭제할 요소의 다음 데이터 영역을 가리키도록 수정한다.
- 그 후 삭제할 요소를 삭제한다.


Doubly Linked List(이중 연결 리스트)
- 양방향으로 이어지는 연결 리스트
- Singly Linked List보다 자료구조의 크기가 조금 더 크다.

1. 요소 추가
- 추가할 요소의 다음 요소를 가리키도록 한다.
- 추가할 요소 이전 요소에서 추가할 요소를 가리키도록 한다.
- 추가할 요소의 다음 요소에서 추가할 요소를 가리키도록 한다.
- 추가할 요소에서 추가할 요소 이전의 노드를 가리키도록 한다.

2. 요소 삭제
- 삭제할 요소의 이전 요소가 삭제할 요소의 다음 요소를 가리키도록 한다.
- 삭제할 요소의 다음 요소가 삭제할 요소의 이전 요소를 가리키도록 한다.
- 삭제할 요소를 삭제한다.


Circular Linked List(환형 연결 리스트)
- Singly 혹은 Doubly Linked List에서 Tail이 Head로 연결되는 연결리스트
- 메모리를 아껴쓸 수 있다. 원형 큐 등을 만들때도 사용된다.

