쿠키와 세션, 웹 스토리지
HTTP 통신
- HTTP Request는 기본적으로 상태가 존재하지 않는다.
- 따라서 서버는 어떤 브라우저에서 요청이 온 것인지 알 수 없다.
- 이때 헤더에 쿠키를 담으면 서버가 쿠키를 읽어 어디서 온 것인지 알 수 있다.

Cookie
- 클라이언트에서 저장, 관리하는 데이터들. 브라우저를 닫아도 데이터를 유지할 수 있다.
- 서버에서 Set-Cookie를 응답 헤더로 내려주면 클라이언트는 받아서 저장한다.
- 클라이언트에서 자체적으로 조작할 수 있다.
- 각 상태에 수명을 정할 수 있다.
 
Set Cookie
- Set-Cookie: 키=값; 옵션
- 응답 헤더에 담으면 브라우저가 알아서 저장한다.
- 각 데이터엔 여러 옵션이 존재한다.
- Expires: 쿠키 만료 날짜 지정
- Secure: HTTPS에서만 쿠키를 전송한다.
- HttpOnly: JavaScript에서 쿠키에 접근 못하도록 막는다.
- Max-Age: 쿠키 수명을 정한다. 이때 Expires는 무시된다.
- Domain: 도메인이 일치하는 요청만 쿠키가 전송된다.
- Path: 패스와 일치하는 요청만 쿠키가 전송된다.

쿠키의 취약점
- XSS(Cross-Site Script) 공격을 당할 수 있다.
- JavaScript를 이용해 악의적인 사용자가 다른 사용자의 쿠키값을 탈취할 수 있다.
- 쿠키를 암호화하지 않고 보내면 쿠키값을 중간에 탈취당할 가능성이 있다.
- HTTPS

서버가 사용자를 구분하려면?
Session
- HTTP Session ID를 식별자로 사용자를 구분한다.
- 클라이언트는 HTTP Session ID를 쿠키 형태로 저장한다.
- 서버 자체적으로 기록하고 관리한다.

이제 서버와 클라이언트간 인증은 별도 토큰을 이용하고
쿠키는 클라이언트 자체적인 지속적인 데이터 관리 용도로 많이 사용된다.

웹 스토리지
- 클라이언트에 데이터를 저장하기 위한 새로운 방법
- HTML5 부터 등장했다.
- 쿠키에서 하기 힘든 것들을 지원하기 위해 등장했다.
- 로컬 스토리지와 세션 스토리지가 있다.

로컬 스토리지
- 로컬 스토리지에 데이터를 저장하면 반 영구적으로 데이터가 저장된다.
- 브라우저를 종료해도 계속해서 데이터가 남는다.

세션 스토리지
- 새 창을 생성할 때 마다 개별적으로 저장되는 데이터를 관리한다.
- 브라우저를 닫는 순간 사라진다.

한번 알아보기!
- IndexedDB
Indexed Database API 또는 IndexedDB(과거 이름: WebSimpleDB)는 색인이 포함된 JSON 객체가 모여있는 트랜잭셔널 로컬 데이터베이스를 위해
 W3C가 권고한 웹 브라우저 표준 인터페이스의 하나이다.
 웹사이트는 데이터베이스에서 영속적인 데이터를 모아서 저장할 수 있다.
 W3C는 2015년 1월 8일 IndexedDB 인터페이스를 위한 최종 권고안을 발행하였다.